import sys
from player import Player

# list all vent types
EVENT_CLASS_INPUT = 0
EVENT_CLASS_NETWORK = 1
EVENT_CLASS_FINAL = 2

EVENT_CLASSES = [EVENT_CLASS_INPUT, EVENT_CLASS_NETWORK, EVENT_CLASS_FINAL]


class EventManager(object):
    """handles the events between managers in the game"""

    def __init__(self):
        # initialize the right queues for each type
        # loops the event types creating a list for each of those
        self.subscriberQueues = dict()
        for eventClass in EVENT_CLASSES:
            self.subscriberQueues[eventClass] = list()

    # publishes an event of eType. eType must have been defined. returns success on ok publishing
    def publishEvent(self, event):
        print "EVENT: %s" % event
        # TODO check for the right queue. contact all subscribers.
        for subscriber in self.subscriberQueues[event.eclass]:
            subscriber.onEvent(event)

    # adds a new class to the subscriber to that eType. return success on ok subscription
    def subscribe(self, eclass, subscriber):
        # TODO check for the right queue. add subscriber to queue
        self.subscriberQueues[eclass].append(subscriber)

    # deletes the new class from the queue. return success on ok subscription
    def unsubscribe(self, eclass, subscriber):
        # TODO check for the right queue. delete subscriber to queue
        self.subscriberQueues[eclass].remove(subscriber)

    def start(self):
        pass

    def stop(self):
        pass


class EventSubscriber(object):
    """Interface that all event subscribers must implement."""

    def __init__(self):
        super(EventSubscriber, self).__init__()
        self.eQueue = list()

    def onEvent(self, event):
        self.eQueue.append(event)


class Event(object):
    """Represents a game event."""

    def __init__(self, eclass):
        self.eclass = eclass

    def get_class(self):
        return self.eclass


class EventClassInput(Event):
    """represents the events generated by the user"""

    TYPE_SPEED = 0
    # has a "player" and a "speed" objects
    TYPE_MOVE_DIRECTION = 1
    # has a "player" and a "direction" objects
    TYPE_FACE_DIRECTION = 2
    # has a "player" and a "direction" objects

    TYPE_TURBO = 3 # TODO
    TYPE_EXIT = 4

    def __init__(self, etype, properties):
        super(EventClassInput, self).__init__(EVENT_CLASS_INPUT)
        self.etype = etype
        self.properties = properties


class EventClassNetwork(Event):
    """Represents the events generated by the network manager."""

    TYPE_NO_CONNECTION = 0
    TYPE_CONNECTED = 1
    TYPE_MOVE_DIRECTION = 2
    TYPE_FACE_DIRECTION = 3
    TYPE_TURBO = 4
    TYPE_EXIT = 5

    def __init__(self, etype, properties):
        super(EventClassNetwork, self).__init__(EVENT_CLASS_NETWORK)
        self.etype = etype
        self.properties = properties


class EventClassFinal(Event):
    """represents the events provided by the server"""

    TYPE_SPEED = 0
    TYPE_MOVE_DIRECTION = 1
    TYPE_FACE_DIRECTION = 2
    TYPE_TURBO = 3
    TYPE_EXIT = 4

    def __init__(self, etype, properties):
        super(EventClassFinal, self).__init__(EVENT_CLASS_INPUT)
        self.etype = etype
        self.properties = properties


# class EventPlayerMove(Event):
#     """represents an event for a player moving"""

#     def __init__(self, player, move):
#         super(EventPlayerMove, self).__init__(EVENT_TYPE_PLAYER_MOVE)
#         self.player = player
#         self.move = move

# class EventPlayerDirect(Event):
#     """represents an event for a player changeing position"""

#     def __init__(self, player, direction):
#         super(EventPlayerDirect, self).__init__(EVENT_TYPE_PLAYER_REDIRECT)
#         self.player = player
#         self.direction = direction

